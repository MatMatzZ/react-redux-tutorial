{"version":3,"sources":["redux/iceCream/iceCreamTypes.js","redux/user/userType.js","redux/simpleCake/simpleCakeSlice.js","redux/sliceStore.js","redux/cake/cakeAction.js","redux/cake/cakeTypes.js","redux/iceCream/iceCreamAction.js","redux/user/userAction.js","components/CakeContainer.js","components/IceCreamContainer.js","components/NewCakeContainer.js","components/ItemContainer.js","components/UserTable.js","components/UserContainer.js","redux/simpleCake/SimpleCake.js","App.js","serviceWorker.js","index.js"],"names":["BUY_ICECREAM","FETCH_USER_REQUEST","FETCH_USER_SUCCESS","FETCH_USER_FAILURE","slice","createSlice","name","initialState","value","reducers","buycake","state","buyWithQuantity","action","payload","actions","selectCount","counter","configureStore","reducer","simpleCakeReducer","buyCake","number","type","require","buyIceCream","fetchUsers","dispatch","axios","get","then","response","users","data","fetchUserSuccess","catch","error","errorMsg","message","connect","numOfCakes","cake","props","onClick","numOfIceCream","iceCream","useState","setNumber","onChange","e","target","ownProps","item","nameOfItem","UserTable","map","user","id","username","email","userData","useEffect","loading","SimpleCake","count","useSelector","useDispatch","incrementAmount","setIncrementAmount","Number","amount","setTimeout","Buy","Cake","Async","App","store","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.aee84df1.chunk.js","sourcesContent":["export const BUY_ICECREAM = 'BUY_ICECREAM'","export const FETCH_USER_REQUEST = 'FETCH_USER_REQUEST'\r\nexport const FETCH_USER_SUCCESS = 'FETCH_USER_SUCCESS'\r\nexport const FETCH_USER_FAILURE = 'FETCH_USER_FAILURE'","import {createSlice} from '@reduxjs/toolkit'\r\n\r\nexport const slice = createSlice({\r\n    name: 'counter',\r\n    initialState: {\r\n      value: 100,\r\n    },\r\n    reducers: {\r\n        buycake: (state)=>{\r\n            state.value -= 1\r\n        },\r\n        buyWithQuantity: (state,action) =>{\r\n            state.value -= action.payload\r\n        }\r\n    }\r\n})\r\n\r\nexport const {buycake,buyWithQuantity} = slice.actions\r\n\r\nexport const buyAsync = amount => dispatch =>{\r\n    setTimeout(() => {\r\n        dispatch(buyWithQuantity(amount))\r\n      }, 1000);\r\n}\r\n\r\nexport const selectCount = (state) => state.counter.value\r\n\r\nexport default slice.reducer","import { configureStore } from '@reduxjs/toolkit';\r\nimport simpleCakeReducer from '../redux/simpleCake/simpleCakeSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: simpleCakeReducer,\r\n  },\r\n});\r\n","import { BUY_CAKE } from './cakeTypes'\r\n\r\nexport const buyCake = (number=1)=>{\r\n    return {\r\n        type: BUY_CAKE,\r\n        payload: number\r\n    }\r\n}","export const BUY_CAKE = 'BUY_CAKE'","const { BUY_ICECREAM } = require(\"./iceCreamTypes\")\r\nexport const buyIceCream = ()=>{\r\n    return {\r\n        type: BUY_ICECREAM\r\n    }\r\n}","import axios from \"axios\"\r\n\r\nconst { FETCH_USER_REQUEST, FETCH_USER_SUCCESS, FETCH_USER_FAILURE } = require(\"./userType\")\r\n\r\nexport const fetchUserRequest = ()=>{\r\n    return{\r\n        type: FETCH_USER_REQUEST\r\n    }\r\n}\r\n\r\nconst fetchUserSuccess = users => {\r\n    return {\r\n        type: FETCH_USER_SUCCESS,\r\n        payload: users\r\n    }\r\n}\r\n\r\nconst fetchUserFailure = users =>{\r\n    return {\r\n        type: FETCH_USER_FAILURE,\r\n        payload: users\r\n    }\r\n}\r\n\r\nexport const fetchUsers = ()=>{\r\n    return (dispatch)=>{\r\n        dispatch(fetchUserRequest())\r\n        axios.get('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=>{\r\n            const users = response.data\r\n            dispatch(fetchUserSuccess(users))\r\n        })\r\n        .catch(error=>{\r\n            var errorMsg = error.message\r\n            dispatch(fetchUserFailure(errorMsg))\r\n        })\r\n    }\r\n}","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport { buyCake } from '../redux'\r\n\r\n\r\nfunction CakeContainer(props) {\r\n    return (\r\n        <div>\r\n            <h2>Number of Cakes - {props.numOfCakes}</h2>\r\n            <button onClick={props.buyCake}>Buy Cake</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return{\r\n        numOfCakes: state.cake.numOfCakes\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        buyCake: ()=> dispatch(buyCake())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(CakeContainer)\r\n","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport { buyIceCream } from '../redux'\r\n\r\n\r\nfunction IceCreamContainer(props) {\r\n    return (\r\n        <div>\r\n            <h2>Number of IceCream - {props.numOfIceCream}</h2>\r\n            <button onClick={props.buyIceCream}>Buy Cake</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return{\r\n        numOfIceCream: state.iceCream.numOfIceCream\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        buyIceCream: ()=> dispatch(buyIceCream())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(IceCreamContainer)\r\n","import React, {useState} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport { buyCake } from '../redux'\r\n\r\n\r\nfunction NewCakeContainer(props) {\r\n    const [number,setNumber] = useState(1)\r\n    return (\r\n        <div>\r\n            <h2>Number of Cakes - {props.numOfCakes}</h2>\r\n            <input type=\"number\" value={number} onChange={e=>setNumber(e.target.value)}></input>\r\n            <button onClick={()=>props.buyCake(number)}>Buy {number} Cake</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return{\r\n        numOfCakes: state.cake.numOfCakes\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        buyCake: number=> dispatch(buyCake(number))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(NewCakeContainer)\r\n","import React,{useState} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport { buyCake, buyIceCream } from '../redux'\r\n\r\nfunction ItemContainer(props) {\r\n    const [number,setNumber] = useState(1)\r\n    return (\r\n        <div>\r\n            <h2>Number of {props.nameOfItem} - {props.item}</h2>\r\n            <input type=\"number\" value={number} onChange={(e)=>setNumber(e.target.value)}></input>\r\n            <button onClick={props.dispatch}>Buy {number} {props.nameOfItem} </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state,ownProps) =>{\r\n    const itemState = ownProps.cake ? state.cake.numOfCakes : state.iceCream.numOfIceCream\r\n    const nameItemState = ownProps.cake ? 'Cake' : 'Ice Cream'\r\n    return {\r\n        item : itemState,\r\n        nameOfItem: nameItemState\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps)=>{\r\n    const dispatchFunction = ownProps.cake ? ()=>dispatch(buyCake()) : ()=> dispatch(buyIceCream()) \r\n    return {\r\n        dispatch: dispatchFunction\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(ItemContainer)\r\n","import React from 'react'\r\n\r\nfunction UserTable(props) {\r\n    return (\r\n        <div>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Id</th>\r\n                        <th>Name</th>\r\n                        <th>Username</th>\r\n                        <th>Email</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        props.users.map(user=>\r\n                            <tr>\r\n                                <td>{user.id}</td>\r\n                                <td>{user.name}</td>\r\n                                <td>{user.username}</td>\r\n                                <td>{user.email}</td>\r\n                            </tr>\r\n                            )\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserTable\r\n","import React, {useEffect} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {fetchUsers} from '../redux'\r\nimport UserTable from './UserTable'\r\n\r\nfunction UserContainer({userData,fetchUsers}) {\r\n    useEffect(()=>{\r\n        fetchUsers()\r\n    },[])\r\n    return userData.loading ? (\r\n        <h2>Loading</h2>\r\n    ) : userData.error ? (\r\n        <h2>{userData.error}</h2>\r\n    ) : (\r\n        <div>\r\n            <h2>User List</h2>\r\n            <div>\r\n                {\r\n                    userData && \r\n                    userData.users && \r\n                    <UserTable users={userData.users}></UserTable>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state =>{\r\n    return{\r\n        userData: state.user\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch=>{\r\n    return{\r\n        fetchUsers: ()=> dispatch(fetchUsers())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(UserContainer)\r\n","import React, { useState } from 'react'\r\nimport { useSelector , useDispatch } from 'react-redux'\r\nimport { buycake, buyWithQuantity, buyAsync, selectCount} from './simpleCakeSlice'\r\n\r\nexport function SimpleCake() {\r\n    const count = useSelector(selectCount);\r\n    const dispatch = useDispatch();\r\n    const [incrementAmount, setIncrementAmount] = useState('2');\r\n    return(\r\n        <div>\r\n            <h2>Amount of Cake: {count}</h2>\r\n            <input type=\"number\" value={incrementAmount} onChange={(e)=>{setIncrementAmount(e.target.value)}}></input>\r\n            <button onClick={()=> dispatch(buycake())}>Buy 1 Cake</button>\r\n            <button onClick={()=> dispatch(buyWithQuantity(Number(incrementAmount)))}>Buy {incrementAmount} Cake</button>\r\n            <button onClick={()=> dispatch(buyAsync(Number(incrementAmount)))}Buy Cake Async>Buy Async</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\nimport './App.css';\nimport { Provider } from 'react-redux'\n//import store from './redux/store'\nimport store from './redux/sliceStore'\nimport CakeContainer from './components/CakeContainer';\n//import HooksCakeContainer from './components/HooksCakeContainer';\nimport IceCreamContainer from './components/IceCreamContainer';\nimport NewCakeContainer from './components/NewCakeContainer';\nimport ItemContainer from './components/ItemContainer';\nimport UserContainer from './components/UserContainer';\nimport { SimpleCake } from './redux/simpleCake/SimpleCake';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        {/* <ItemContainer cake/>\n        <ItemContainer/> */}\n        {/* <UserContainer/> */}\n        <SimpleCake/>\n        {/* <NewCakeContainer/>\n        <CakeContainer></CakeContainer>\n        <IceCreamContainer/> */}\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}